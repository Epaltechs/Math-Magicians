85490e8fbf100e91ea874fe2ec92303c
"use strict";

var _interopRequireDefault = require("C:/Users/Otomfon/Desktop/Math-Magicians/node_modules/@babel/runtime/helpers/interopRequireDefault.js").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calculate;

var _operate = _interopRequireDefault(require("./operate"));

function isNumber(item) {
  return !!item.match(/[0-9]+/);
}
/**
 * Given a button name and a calculator data object, return an updated
 * calculator data object.
 *
 * Calculator data object contains:
 *   total:s      the running total
 *   next:String       the next number to be operated on with the total
 *   operation:String  +, -, etc.
 */


function calculate(obj, buttonName) {
  if (buttonName === 'AC') {
    return {
      total: null,
      next: '0',
      operation: null
    };
  }

  if (isNumber(buttonName)) {
    if (buttonName === '0' && obj.next === '0') {
      return {};
    } // If there is an operation, update next


    if (obj.operation) {
      if (obj.next && obj.next !== '0') {
        return { ...obj,
          next: obj.next + buttonName
        };
      }

      return { ...obj,
        next: buttonName
      };
    } // If there is no operation, update next and clear the value


    if (obj.next && obj.next !== '0') {
      return {
        next: obj.next + buttonName,
        total: null
      };
    }

    return {
      next: buttonName,
      total: null
    };
  }

  if (buttonName === '.') {
    if (obj.next) {
      if (obj.next.includes('.')) {
        return { ...obj
        };
      }

      return { ...obj,
        next: `${obj.next}.`
      };
    }

    if (obj.operation) {
      return { ...obj,
        next: '0.'
      };
    }

    if (obj.total) {
      if (obj.total.includes('.')) {
        return {};
      }

      return { ...obj,
        next: `${obj.total}.`
      };
    }

    return { ...obj,
      next: '0.'
    };
  }

  if (buttonName === '=') {
    if (obj.next && obj.operation) {
      return {
        total: (0, _operate.default)(obj.total, obj.next, obj.operation),
        next: null,
        operation: null
      };
    } // '=' with no operation, nothing to do


    return {};
  }

  if (buttonName === '+/-') {
    if (obj.next) {
      return { ...obj,
        next: (-1 * parseFloat(obj.next)).toString()
      };
    }

    if (obj.total) {
      return { ...obj,
        total: (-1 * parseFloat(obj.total)).toString()
      };
    }

    return {};
  } // Button must be an operation
  // When the user presses an operation button without having entered
  // a number first, do nothing.
  // if (!obj.next && !obj.total) {
  //   return {};
  // }
  // User pressed an operation after pressing '='


  if (!obj.next && obj.total && !obj.operation) {
    return { ...obj,
      operation: buttonName
    };
  } // User pressed an operation button and there is an existing operation


  if (obj.operation) {
    if (obj.total && !obj.next) {
      return { ...obj,
        operation: buttonName
      };
    }

    if (!obj.total) {
      return {
        total: 0,
        operation: buttonName
      };
    }

    return {
      total: (0, _operate.default)(obj.total, obj.next, obj.operation),
      next: null,
      operation: buttonName
    };
  } // no operation yet, but the user typed one
  // The user hasn't typed a number yet, just save the operation


  if (!obj.next) {
    return {
      operation: buttonName
    };
  } // save the operation and shift 'next' into 'total'


  return {
    total: obj.next,
    next: null,
    operation: buttonName
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc051bWJlciIsIml0ZW0iLCJtYXRjaCIsImNhbGN1bGF0ZSIsIm9iaiIsImJ1dHRvbk5hbWUiLCJ0b3RhbCIsIm5leHQiLCJvcGVyYXRpb24iLCJpbmNsdWRlcyIsIm9wZXJhdGUiLCJwYXJzZUZsb2F0IiwidG9TdHJpbmciXSwic291cmNlcyI6WyJjYWxjdWxhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9wZXJhdGUgZnJvbSAnLi9vcGVyYXRlJztcblxuZnVuY3Rpb24gaXNOdW1iZXIoaXRlbSkge1xuICByZXR1cm4gISFpdGVtLm1hdGNoKC9bMC05XSsvKTtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIGJ1dHRvbiBuYW1lIGFuZCBhIGNhbGN1bGF0b3IgZGF0YSBvYmplY3QsIHJldHVybiBhbiB1cGRhdGVkXG4gKiBjYWxjdWxhdG9yIGRhdGEgb2JqZWN0LlxuICpcbiAqIENhbGN1bGF0b3IgZGF0YSBvYmplY3QgY29udGFpbnM6XG4gKiAgIHRvdGFsOnMgICAgICB0aGUgcnVubmluZyB0b3RhbFxuICogICBuZXh0OlN0cmluZyAgICAgICB0aGUgbmV4dCBudW1iZXIgdG8gYmUgb3BlcmF0ZWQgb24gd2l0aCB0aGUgdG90YWxcbiAqICAgb3BlcmF0aW9uOlN0cmluZyAgKywgLSwgZXRjLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjdWxhdGUob2JqLCBidXR0b25OYW1lKSB7XG4gIGlmIChidXR0b25OYW1lID09PSAnQUMnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsOiBudWxsLFxuICAgICAgbmV4dDogJzAnLFxuICAgICAgb3BlcmF0aW9uOiBudWxsLFxuICAgIH07XG4gIH1cblxuICBpZiAoaXNOdW1iZXIoYnV0dG9uTmFtZSkpIHtcbiAgICBpZiAoYnV0dG9uTmFtZSA9PT0gJzAnICYmIG9iai5uZXh0ID09PSAnMCcpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gb3BlcmF0aW9uLCB1cGRhdGUgbmV4dFxuICAgIGlmIChvYmoub3BlcmF0aW9uKSB7XG4gICAgICBpZiAob2JqLm5leHQgJiYgb2JqLm5leHQgIT09ICcwJykge1xuICAgICAgICByZXR1cm4geyAuLi5vYmosIG5leHQ6IG9iai5uZXh0ICsgYnV0dG9uTmFtZSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgLi4ub2JqLCBuZXh0OiBidXR0b25OYW1lIH07XG4gICAgfVxuICAgIC8vIElmIHRoZXJlIGlzIG5vIG9wZXJhdGlvbiwgdXBkYXRlIG5leHQgYW5kIGNsZWFyIHRoZSB2YWx1ZVxuICAgIGlmIChvYmoubmV4dCAmJiBvYmoubmV4dCAhPT0gJzAnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBvYmoubmV4dCArIGJ1dHRvbk5hbWUsXG4gICAgICAgIHRvdGFsOiBudWxsLFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGJ1dHRvbk5hbWUsXG4gICAgICB0b3RhbDogbnVsbCxcbiAgICB9O1xuICB9XG5cbiAgaWYgKGJ1dHRvbk5hbWUgPT09ICcuJykge1xuICAgIGlmIChvYmoubmV4dCkge1xuICAgICAgaWYgKG9iai5uZXh0LmluY2x1ZGVzKCcuJykpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ub2JqIH07XG4gICAgICB9XG4gICAgICByZXR1cm4geyAuLi5vYmosIG5leHQ6IGAke29iai5uZXh0fS5gIH07XG4gICAgfVxuICAgIGlmIChvYmoub3BlcmF0aW9uKSB7XG4gICAgICByZXR1cm4geyAuLi5vYmosIG5leHQ6ICcwLicgfTtcbiAgICB9XG4gICAgaWYgKG9iai50b3RhbCkge1xuICAgICAgaWYgKG9iai50b3RhbC5pbmNsdWRlcygnLicpKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IC4uLm9iaiwgbmV4dDogYCR7b2JqLnRvdGFsfS5gIH07XG4gICAgfVxuICAgIHJldHVybiB7IC4uLm9iaiwgbmV4dDogJzAuJyB9O1xuICB9XG5cbiAgaWYgKGJ1dHRvbk5hbWUgPT09ICc9Jykge1xuICAgIGlmIChvYmoubmV4dCAmJiBvYmoub3BlcmF0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3RhbDogb3BlcmF0ZShvYmoudG90YWwsIG9iai5uZXh0LCBvYmoub3BlcmF0aW9uKSxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgb3BlcmF0aW9uOiBudWxsLFxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gJz0nIHdpdGggbm8gb3BlcmF0aW9uLCBub3RoaW5nIHRvIGRvXG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgaWYgKGJ1dHRvbk5hbWUgPT09ICcrLy0nKSB7XG4gICAgaWYgKG9iai5uZXh0KSB7XG4gICAgICByZXR1cm4geyAuLi5vYmosIG5leHQ6ICgtMSAqIHBhcnNlRmxvYXQob2JqLm5leHQpKS50b1N0cmluZygpIH07XG4gICAgfVxuICAgIGlmIChvYmoudG90YWwpIHtcbiAgICAgIHJldHVybiB7IC4uLm9iaiwgdG90YWw6ICgtMSAqIHBhcnNlRmxvYXQob2JqLnRvdGFsKSkudG9TdHJpbmcoKSB9O1xuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH1cblxuICAvLyBCdXR0b24gbXVzdCBiZSBhbiBvcGVyYXRpb25cblxuICAvLyBXaGVuIHRoZSB1c2VyIHByZXNzZXMgYW4gb3BlcmF0aW9uIGJ1dHRvbiB3aXRob3V0IGhhdmluZyBlbnRlcmVkXG4gIC8vIGEgbnVtYmVyIGZpcnN0LCBkbyBub3RoaW5nLlxuICAvLyBpZiAoIW9iai5uZXh0ICYmICFvYmoudG90YWwpIHtcbiAgLy8gICByZXR1cm4ge307XG4gIC8vIH1cblxuICAvLyBVc2VyIHByZXNzZWQgYW4gb3BlcmF0aW9uIGFmdGVyIHByZXNzaW5nICc9J1xuICBpZiAoIW9iai5uZXh0ICYmIG9iai50b3RhbCAmJiAhb2JqLm9wZXJhdGlvbikge1xuICAgIHJldHVybiB7IC4uLm9iaiwgb3BlcmF0aW9uOiBidXR0b25OYW1lIH07XG4gIH1cblxuICAvLyBVc2VyIHByZXNzZWQgYW4gb3BlcmF0aW9uIGJ1dHRvbiBhbmQgdGhlcmUgaXMgYW4gZXhpc3Rpbmcgb3BlcmF0aW9uXG4gIGlmIChvYmoub3BlcmF0aW9uKSB7XG4gICAgaWYgKG9iai50b3RhbCAmJiAhb2JqLm5leHQpIHtcbiAgICAgIHJldHVybiB7IC4uLm9iaiwgb3BlcmF0aW9uOiBidXR0b25OYW1lIH07XG4gICAgfVxuXG4gICAgaWYgKCFvYmoudG90YWwpIHtcbiAgICAgIHJldHVybiB7IHRvdGFsOiAwLCBvcGVyYXRpb246IGJ1dHRvbk5hbWUgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG90YWw6IG9wZXJhdGUob2JqLnRvdGFsLCBvYmoubmV4dCwgb2JqLm9wZXJhdGlvbiksXG4gICAgICBuZXh0OiBudWxsLFxuICAgICAgb3BlcmF0aW9uOiBidXR0b25OYW1lLFxuICAgIH07XG4gIH1cblxuICAvLyBubyBvcGVyYXRpb24geWV0LCBidXQgdGhlIHVzZXIgdHlwZWQgb25lXG5cbiAgLy8gVGhlIHVzZXIgaGFzbid0IHR5cGVkIGEgbnVtYmVyIHlldCwganVzdCBzYXZlIHRoZSBvcGVyYXRpb25cbiAgaWYgKCFvYmoubmV4dCkge1xuICAgIHJldHVybiB7IG9wZXJhdGlvbjogYnV0dG9uTmFtZSB9O1xuICB9XG5cbiAgLy8gc2F2ZSB0aGUgb3BlcmF0aW9uIGFuZCBzaGlmdCAnbmV4dCcgaW50byAndG90YWwnXG4gIHJldHVybiB7XG4gICAgdG90YWw6IG9iai5uZXh0LFxuICAgIG5leHQ6IG51bGwsXG4gICAgb3BlcmF0aW9uOiBidXR0b25OYW1lLFxuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQSxTQUFTQSxRQUFULENBQWtCQyxJQUFsQixFQUF3QjtFQUN0QixPQUFPLENBQUMsQ0FBQ0EsSUFBSSxDQUFDQyxLQUFMLENBQVcsUUFBWCxDQUFUO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNB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